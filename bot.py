

import logging
import os
import asyncio
import time
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)
from telegram.constants import ParseMode

from telethon import TelegramClient, errors
from telethon.errors import (
    SessionPasswordNeededError, FloodWaitError, PeerIdInvalidError
)

########################################
# Logging
########################################
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

########################################
# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
########################################
BOT_TOKEN =  "7564269477:AAERD3vSP2gA6zYhBkoydZbEfX9lJKxozTk"   # <-- –í—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
USER_STATE = {}        # user_id -> state
USER_TAGGER_TASKS = {} # user_id -> asyncio.Task

# –í–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è:
#  - "MAIN_MENU"
#  - "CHOOSE_ACCOUNT"
#  - "ENTER_API_ID_1", "ENTER_API_HASH_1", "ENTER_PHONE_1", "WAITING_CODE_1", "WAITING_PASSWORD_1"
#  - "ENTER_API_ID_2", "ENTER_API_HASH_2", "ENTER_PHONE_2", "WAITING_CODE_2", "WAITING_PASSWORD_2"
#  - "WAITING_SOURCE_GROUP", "WAITING_SPAM_INTERVAL", "WAITING_ROTATION_INTERVAL", "SPAM_READY"

########################################
# Keyboards
########################################

def start_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("Weiter ‚ñ∂Ô∏è", callback_data="continue")]
    ])

def main_menu_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ê–∫–∫–∞—É–Ω—Ç—ã", callback_data="menu_accounts")],
        [
            InlineKeyboardButton("Tagger starten üöÄ", callback_data="launch_tagger"),
            InlineKeyboardButton("Tagger stoppen üõë", callback_data="stop_tagger")
        ],
        [InlineKeyboardButton("Anleitung üìö", callback_data="instructions")],
    ])

def accounts_menu_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ê–∫–∫–∞—É–Ω—Ç ‚Ññ1", callback_data="account_1")],
        [InlineKeyboardButton("–ê–∫–∫–∞—É–Ω—Ç ‚Ññ2", callback_data="account_2")],
        [InlineKeyboardButton("<< –ù–∞–∑–∞–¥", callback_data="go_back_main_menu")]
    ])

def digit_keyboard(current_code=""):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ü–∏—Ñ—Ä (0-9, —É–¥–∞–ª–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å)."""
    kb = [
        [
            InlineKeyboardButton("1", callback_data="digit_1"),
            InlineKeyboardButton("2", callback_data="digit_2"),
            InlineKeyboardButton("3", callback_data="digit_3")
        ],
        [
            InlineKeyboardButton("4", callback_data="digit_4"),
            InlineKeyboardButton("5", callback_data="digit_5"),
            InlineKeyboardButton("6", callback_data="digit_6")
        ],
        [
            InlineKeyboardButton("7", callback_data="digit_7"),
            InlineKeyboardButton("8", callback_data="digit_8"),
            InlineKeyboardButton("9", callback_data="digit_9")
        ],
        [
            InlineKeyboardButton("0", callback_data="digit_0"),
            InlineKeyboardButton("–õ‚¨ÖÔ∏è", callback_data="digit_del"),
            InlineKeyboardButton("OK‚úÖ", callback_data="digit_submit")
        ]
    ]
    return InlineKeyboardMarkup(kb)

########################################
# /start
########################################
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    USER_STATE[user_id] = "MAIN_MENU"

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç
    if 'accounts' not in context.user_data:
        context.user_data['accounts'] = {
            1: {'client': None, 'api_id': None, 'api_hash': None, 'phone': None, 'is_authorized': False},
            2: {'client': None, 'api_id': None, 'api_hash': None, 'phone': None, 'is_authorized': False},
        }

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ 'Weiter', —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –º–µ–Ω—é:",
        reply_markup=start_keyboard()
    )

########################################
# –•–µ–ª–ø–µ—Ä: –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ù–ï —Å–µ—Ä–≤–∏—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
########################################
async def get_last_non_service_message(client: TelegramClient, source_group: str):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ (—Å–∞–º–æ–µ —Å–≤–µ–∂–µ–µ) "–æ–±—ã—á–Ω–æ–µ" (text/media) —Å–æ–æ–±—â–µ–Ω–∏–µ
    –∏–∑ source_group. –°–µ—Ä–≤–∏—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (msg.action != None) –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç.
    """
    entity = await client.get_entity(source_group)
    raw_msgs = await client.get_messages(entity, limit=10)
    for m in raw_msgs:
        # –ï—Å–ª–∏ –Ω–µ—Ç m.action => —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not m.action:
            return m
    return None

########################################
# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–ø–∞–º–∞ (–¥–≤–∞ –∞–∫–∫–∞—É–Ω—Ç–∞, —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ)
########################################
async def run_tagger(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ß–µ—Ä–µ–¥—É–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã ‚Ññ1 –∏ ‚Ññ2 –∫–∞–∂–¥—ã–µ rotation_interval —Å–µ–∫—É–Ω–¥.  
       –ö–∞–∂–¥—ã–µ spam_interval —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ "–æ–±—ã—á–Ω–æ–µ" —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ source_group.
       –°–µ—Ä–≤–∏—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.
    """
    user_id = update.effective_user.id

    source_group = context.user_data.get('source_group')
    spam_interval = context.user_data.get('spam_interval', 60.0)
    rotation_interval = context.user_data.get('rotation_interval', 300.0)

    acc_data = context.user_data['accounts']
    client1 = acc_data[1]['client']
    client2 = acc_data[2]['client']

    if not (acc_data[1]['is_authorized'] and acc_data[2]['is_authorized']):
        await update.effective_message.reply_text(
            "–û–±–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ –º–µ–Ω—é '–ê–∫–∫–∞—É–Ω—Ç—ã'."
        )
        return

    if not source_group:
        await update.effective_message.reply_text("–ù–µ —É–∫–∞–∑–∞–Ω–∞ –≥—Ä—É–ø–ø–∞-–∏—Å—Ç–æ—á–Ω–∏–∫.")
        return

    stop_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("Tagger stoppen üõë", callback_data="stop_tagger")]
    ])

    await update.effective_message.reply_text(
        f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É!\n"
        f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏: {spam_interval} —Å–µ–∫.\n"
        f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∫–∞–∂–¥—ã–µ: {rotation_interval} —Å–µ–∫.\n",
        reply_markup=stop_keyboard
    )

    current_account = 1
    next_switch_time = time.time() + rotation_interval

    try:
        while True:
            try:
                # –í—ã–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
                active_client = client1 if current_account == 1 else client2

                # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ù–ï —Å–µ—Ä–≤–∏—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                last_msg = await get_last_non_service_message(active_client, source_group)
                if last_msg:
                    dialogs = await active_client.get_dialogs(limit=None)
                    target_chats = [d for d in dialogs if (d.is_group or d.is_channel)]

                    for chat in target_chats:
                        try:
                            await active_client.forward_messages(
                                entity=chat,
                                messages=last_msg,      # –ø–µ—Ä–µ–¥–∞—ë–º —Å–∞–º –æ–±—ä–µ–∫—Ç
                                from_peer=last_msg.peer_id
                            )
                            logger.info(
                                f"[–ê–∫–∫ {current_account}] –ü–µ—Ä–µ—Å–ª–∞–ª msg_id={last_msg.id} "
                                f"–≤ {chat.name or chat.id}"
                            )
                        except FloodWaitError as e:
                            logger.warning(f"[–ê–∫–∫ {current_account}] FloodWait ‚Üí {e.seconds} —Å–µ–∫")
                            continue
                        except errors.ChatWriteForbiddenError:
                            logger.warning(f"[–ê–∫–∫ {current_account}] –ù–µ—Ç –ø—Ä–∞–≤ –ø–∏—Å–∞—Ç—å –≤ {chat.name}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                            continue
                        except errors.ChatAdminRequiredError:
                            logger.warning(f"[–ê–∫–∫ {current_account}] –ù—É–∂–Ω–æ –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º –≤ {chat.name}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                            continue
                        except PeerIdInvalidError:
                            logger.warning(f"[–ê–∫–∫ {current_account}] PeerIdInvalid –¥–ª—è {chat.name}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                            continue
                        except errors.rpcerrorlist.ChatIdInvalidError:
                            logger.warning(f"[–ê–∫–∫ {current_account}] ChatIdInvalid –¥–ª—è {chat.name}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                            continue
                        except SessionPasswordNeededError:
                            logger.error(f"[–ê–∫–∫ {current_account}] –ù—É–∂–µ–Ω 2FA –ø–∞—Ä–æ–ª—å!")
                            USER_STATE[user_id] = f"WAITING_PASSWORD_{current_account}"
                            return
                        except Exception as e:
                            logger.error(f"[–ê–∫–∫ {current_account}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –≤ {chat.name}: {e}")
                            continue

                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏
                await asyncio.sleep(spam_interval)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—Ä–∞ –ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç
                if time.time() >= next_switch_time:
                    current_account = 2 if current_account == 1 else 1
                    next_switch_time = time.time() + rotation_interval
                    logger.info(f"–ü–µ—Ä–µ–∫–ª—é—á–∏–ª—Å—è –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç ‚Ññ{current_account}")

            except asyncio.CancelledError:
                logger.info("Tagger –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (asyncio.CancelledError).")
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                await asyncio.sleep(5)

    finally:
        # –ü—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ - –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è
        if client1 and client1.is_connected():
            await client1.disconnect()
        if client2 and client2.is_connected():
            await client2.disconnect()

        USER_TAGGER_TASKS.pop(user_id, None)
        USER_STATE[user_id] = "MAIN_MENU"
        await update.effective_message.reply_text(
            "üõë Tagger –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.",
            reply_markup=main_menu_keyboard()
        )

########################################
# CALLBACK-Handler
########################################
async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    user_id = update.effective_user.id
    await query.answer()

    if data == "continue":
        USER_STATE[user_id] = "MAIN_MENU"
        await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())

    elif data == "menu_accounts":
        USER_STATE[user_id] = "CHOOSE_ACCOUNT"
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç:", reply_markup=accounts_menu_keyboard())

    elif data == "go_back_main_menu":
        USER_STATE[user_id] = "MAIN_MENU"
        await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())

    elif data == "account_1":
        USER_STATE[user_id] = "ENTER_API_ID_1"
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ API ID (—á–∏—Å–ª–æ) –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ‚Ññ1:")

    elif data == "account_2":
        USER_STATE[user_id] = "ENTER_API_ID_2"
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ API ID (—á–∏—Å–ª–æ) –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ‚Ññ2:")

    elif data == "launch_tagger":
        USER_STATE[user_id] = "WAITING_SOURCE_GROUP"
        await query.edit_message_text("–£–∫–∞–∂–∏—Ç–µ @—Å—Å—ã–ª–∫—É –∏–ª–∏ username –≥—Ä—É–ø–ø—ã-–∏—Å—Ç–æ—á–Ω–∏–∫–∞:")

    elif data == "stop_tagger":
        task = USER_TAGGER_TASKS.get(user_id)
        if task and not task.done():
            task.cancel()
        else:
            await query.edit_message_text(
                "Tagger –Ω–µ –∑–∞–ø—É—â–µ–Ω.",
                reply_markup=main_menu_keyboard()
            )

    elif data == "instructions":
        text_instructions = (
            "1) –û—Ç–∫—Ä–æ–π—Ç–µ ¬´–ê–∫–∫–∞—É–Ω—Ç—ã¬ª –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –æ–±–∞ –∞–∫–∫–∞—É–Ω—Ç–∞.\n"
            "2) –ó–∞–ø—É—Å—Ç–∏—Ç–µ Tagger, —É–∫–∞–∑–∞–≤ –≥—Ä—É–ø–ø—É-–∏—Å—Ç–æ—á–Ω–∏–∫, –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ä–∞—Å—Å—ã–ª–∫–∏, –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è.\n"
            "3) –ë–æ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ '–æ–±—ã—á–Ω—ã–µ' —Å–æ–æ–±—â–µ–Ω–∏—è (–ø—Ä–æ–ø—É—Å–∫–∞—è —Å–µ—Ä–≤–∏—Å–Ω—ã–µ)."
        )
        await query.edit_message_text(text_instructions, reply_markup=main_menu_keyboard())

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞
    elif data.startswith("digit_"):
        action = data.split("_")[1]
        state = USER_STATE.get(user_id, "")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –¥–ª—è –∫–∞–∫–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–¥—ë—Ç –≤–≤–æ–¥ –∫–æ–¥–∞
        if "WAITING_CODE_1" in state:
            acc_number = 1
        elif "WAITING_CODE_2" in state:
            acc_number = 2
        else:
            await query.answer("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –≤–≤–æ–¥ –∫–æ–¥–∞.", show_alert=True)
            return

        current_code = context.user_data.get(f'code_{acc_number}', '')

        if action.isdigit():
            if len(current_code) < 6:
                current_code += action
                context.user_data[f'code_{acc_number}'] = current_code
            else:
                await query.answer("–ú–∞–∫—Å –¥–ª–∏–Ω–∞ –∫–æ–¥–∞ 6", show_alert=True)
        elif action == "del":
            current_code = current_code[:-1]
            context.user_data[f'code_{acc_number}'] = current_code
        elif action == "submit":
            await confirm_code(update, context, acc_number)
            return

        masked_code = '*' * len(current_code) + '_' * (6 - len(current_code))
        await query.edit_message_text(
            f"–ê–∫–∫–∞—É–Ω—Ç ‚Ññ{acc_number}. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥: {masked_code}",
            reply_markup=digit_keyboard(current_code)
        )

########################################
# TEXT-Handler
########################################
async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ 'accounts' –µ—Å—Ç—å
    if 'accounts' not in context.user_data:
        context.user_data['accounts'] = {
            1: {'client': None, 'api_id': None, 'api_hash': None, 'phone': None, 'is_authorized': False},
            2: {'client': None, 'api_id': None, 'api_hash': None, 'phone': None, 'is_authorized': False},
        }

    state = USER_STATE.get(user_id, "")

    # –ê–∫–∫–∞—É–Ω—Ç ‚Ññ1
    if state == "ENTER_API_ID_1":
        if not update.message.text.strip().isdigit():
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (API ID):")
            return
        acc_data = context.user_data['accounts'][1]
        acc_data['api_id'] = int(update.message.text.strip())
        USER_STATE[user_id] = "ENTER_API_HASH_1"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ API Hash –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ‚Ññ1:")
        return

    if state == "ENTER_API_HASH_1":
        acc_data = context.user_data['accounts'][1]
        acc_data['api_hash'] = update.message.text.strip()
        USER_STATE[user_id] = "ENTER_PHONE_1"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω (—Ñ–æ—Ä–º–∞—Ç +9999999999) –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ‚Ññ1:")
        return

    if state == "ENTER_PHONE_1":
        phone = update.message.text.strip()
        if not phone.startswith('+') or not phone[1:].isdigit():
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +123456789")
            return
        acc_data = context.user_data['accounts'][1]
        acc_data['phone'] = phone
        USER_STATE[user_id] = "WAITING_CODE_1"
        await update.message.reply_text("–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –∫–æ–¥ —É Telegram...")
        await create_telethon_client(update, context, acc_number=1)
        return

    # –ê–∫–∫–∞—É–Ω—Ç ‚Ññ2
    if state == "ENTER_API_ID_2":
        if not update.message.text.strip().isdigit():
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (API ID):")
            return
        acc_data = context.user_data['accounts'][2]
        acc_data['api_id'] = int(update.message.text.strip())
        USER_STATE[user_id] = "ENTER_API_HASH_2"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ API Hash –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ‚Ññ2:")
        return

    if state == "ENTER_API_HASH_2":
        acc_data = context.user_data['accounts'][2]
        acc_data['api_hash'] = update.message.text.strip()
        USER_STATE[user_id] = "ENTER_PHONE_2"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω (—Ñ–æ—Ä–º–∞—Ç +9999999999) –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ‚Ññ2:")
        return

    if state == "ENTER_PHONE_2":
        phone = update.message.text.strip()
        if not phone.startswith('+') or not phone[1:].isdigit():
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +123456789")
            return
        acc_data = context.user_data['accounts'][2]
        acc_data['phone'] = phone
        USER_STATE[user_id] = "WAITING_CODE_2"
        await update.message.reply_text("–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –∫–æ–¥ —É Telegram...")
        await create_telethon_client(update, context, acc_number=2)
        return

    # 2FA –ø–∞—Ä–æ–ª—å –∞–∫–∫ ‚Ññ1
    if state == "WAITING_PASSWORD_1":
        pw = update.message.text.strip()
        acc_data = context.user_data['accounts'][1]
        client = acc_data['client']
        if not client:
            await update.message.reply_text("–ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return
        try:
            await client.sign_in(password=pw)
            acc_data['is_authorized'] = True
            USER_STATE[user_id] = "MAIN_MENU"
            await update.message.reply_text(
                "–ê–∫–∫–∞—É–Ω—Ç ‚Ññ1 —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!",
                reply_markup=main_menu_keyboard()
            )
        except errors.PasswordHashInvalidError:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except FloodWaitError as e:
            await update.message.reply_text(f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {e.seconds} —Å–µ–∫.")
            USER_STATE[user_id] = "MAIN_MENU"
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")
        return

    # 2FA –ø–∞—Ä–æ–ª—å –∞–∫–∫ ‚Ññ2
    if state == "WAITING_PASSWORD_2":
        pw = update.message.text.strip()
        acc_data = context.user_data['accounts'][2]
        client = acc_data['client']
        if not client:
            await update.message.reply_text("–ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return
        try:
            await client.sign_in(password=pw)
            acc_data['is_authorized'] = True
            USER_STATE[user_id] = "MAIN_MENU"
            await update.message.reply_text(
                "–ê–∫–∫–∞—É–Ω—Ç ‚Ññ2 —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!",
                reply_markup=main_menu_keyboard()
            )
        except errors.PasswordHashInvalidError:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except FloodWaitError as e:
            await update.message.reply_text(f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {e.seconds} —Å–µ–∫.")
            USER_STATE[user_id] = "MAIN_MENU"
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")
        return

    # –ì—Ä—É–ø–ø–∞-–∏—Å—Ç–æ—á–Ω–∏–∫
    if state == "WAITING_SOURCE_GROUP":
        source_group = update.message.text.strip()
        if not source_group:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É/username –≥—Ä—É–ø–ø—ã.")
            return
        context.user_data['source_group'] = source_group
        USER_STATE[user_id] = "WAITING_SPAM_INTERVAL"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ä–∞—Å—Å—ã–ª–∫–∏ (—Å–µ–∫), –Ω–∞–ø—Ä–∏–º–µ—Ä 60:")
        return

    if state == "WAITING_SPAM_INTERVAL":
        try:
            val = float(update.message.text.strip())
            if val <= 0:
                raise ValueError("–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å > 0.")
            context.user_data['spam_interval'] = val
            USER_STATE[user_id] = "WAITING_ROTATION_INTERVAL"
            await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (—Å–µ–∫), –Ω–∞–ø—Ä–∏–º–µ—Ä 300:")
        except ValueError:
            await update.message.reply_text("–ù—É–∂–Ω–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    if state == "WAITING_ROTATION_INTERVAL":
        try:
            val = float(update.message.text.strip())
            if val <= 0:
                raise ValueError("–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å > 0.")
            context.user_data['rotation_interval'] = val
            await update.message.reply_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–Ω—è—Ç—ã! –ó–∞–ø—É—Å–∫–∞—é —Å–ø–∞–º...")
            USER_STATE[user_id] = "SPAM_READY"
            task = asyncio.create_task(run_tagger(update, context))
            USER_TAGGER_TASKS[user_id] = task
        except ValueError:
            await update.message.reply_text("–ù—É–∂–Ω–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.")

########################################
# confirm_code - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–¥–∞
########################################
async def confirm_code(update: Update, context: ContextTypes.DEFAULT_TYPE, acc_number: int):
    user_id = update.effective_user.id
    code = context.user_data.get(f'code_{acc_number}', '')
    if not code:
        await update.effective_message.reply_text("–ö–æ–¥ –ø—É—Å—Ç. –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return

    acc_data = context.user_data['accounts'][acc_number]
    client = acc_data['client']
    if not client:
        await update.effective_message.reply_text("–ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return

    phone_number = acc_data['phone']
    try:
        await client.sign_in(phone_number, code)
    except SessionPasswordNeededError:
        USER_STATE[user_id] = f"WAITING_PASSWORD_{acc_number}"
        await update.effective_message.reply_text("–£ –≤–∞—Å –≤–∫–ª—é—á—ë–Ω 2FA. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (—Å–æ–æ–±—â–µ–Ω–∏–µ–º).")
        return
    except FloodWaitError as e:
        await update.effective_message.reply_text(f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {e.seconds} —Å–µ–∫.")
        USER_STATE[user_id] = "MAIN_MENU"
        return
    except errors.PhoneCodeInvalidError:
        await update.effective_message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.")
        context.user_data[f'code_{acc_number}'] = ""
        await update.effective_message.reply_text(
            f"–ê–∫–∫–∞—É–Ω—Ç ‚Ññ{acc_number}. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥:",
            reply_markup=digit_keyboard()
        )
        USER_STATE[user_id] = f"WAITING_CODE_{acc_number}"
        return
    except Exception as e:
        await update.effective_message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–¥–∞: {e}")
        return

    acc_data['is_authorized'] = True
    USER_STATE[user_id] = "MAIN_MENU"
    await update.effective_message.reply_text(
        f"–ê–∫–∫–∞—É–Ω—Ç ‚Ññ{acc_number} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!",
        reply_markup=main_menu_keyboard()
    )

########################################
# –°–æ–∑–¥–∞–Ω–∏–µ/–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Telethon-–∫–ª–∏–µ–Ω—Ç–∞
########################################
async def create_telethon_client(update: Update, context: ContextTypes.DEFAULT_TYPE, acc_number: int):
    acc_data = context.user_data['accounts'][acc_number]
    api_id = acc_data['api_id']
    api_hash = acc_data['api_hash']
    phone_number = acc_data['phone']

    if not api_id or not api_hash or not phone_number:
        await update.message.reply_text("API-–¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª–Ω—ã–µ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return

    session_name = f"session_user_{update.effective_user.id}_acc_{acc_number}"
    if not acc_data['client']:
        client = TelegramClient(session_name, api_id, api_hash)
        acc_data['client'] = client
        await client.connect()
    else:
        client = acc_data['client']
        if not client.is_connected():
            await client.connect()

    try:
        if not await client.is_user_authorized():
            await client.send_code_request(phone_number)
            context.user_data[f'code_{acc_number}'] = ""
            USER_STATE[update.effective_user.id] = f"WAITING_CODE_{acc_number}"
            await update.message.reply_text(
                f"–ê–∫–∫–∞—É–Ω—Ç ‚Ññ{acc_number}. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram:",
                reply_markup=digit_keyboard()
            )
        else:
            acc_data['is_authorized'] = True
            USER_STATE[update.effective_user.id] = "MAIN_MENU"
            await update.message.reply_text(
                f"–ê–∫–∫–∞—É–Ω—Ç ‚Ññ{acc_number} —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!",
                reply_markup=main_menu_keyboard()
            )
    except FloodWaitError as e:
        await update.message.reply_text(f"FloodWaitError: –ø–æ–¥–æ–∂–¥–∏—Ç–µ {e.seconds} —Å–µ–∫.")
        USER_STATE[update.effective_user.id] = "MAIN_MENU"
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")
        USER_STATE[update.effective_user.id] = "MAIN_MENU"

########################################
# MAIN
########################################
if __name__ == "__main__":
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", cmd_start))
    application.add_handler(CallbackQueryHandler(callback_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))

    application.run_polling()
